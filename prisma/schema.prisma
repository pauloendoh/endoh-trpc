// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Creation      Creation[]
  exercises     Exercise[]
  friends       Friend[]
  interests     Interest[]
  exerciseTags  ExerciseTag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Creation {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  title        String
  test         String    @default("")
  description  String
  complexity   Int?
  date         DateTime?
  technologies String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([id, userId])
}

model Exercise {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  title       String
  description String
  pump        Int
  like        Int

  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCompletedAt DateTime?

  tags ExerciseTag[]
}

model Friend {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  name String

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  friendInterests FriendInterest[]
}

model Interest {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  name              String
  userInterestLevel Int

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  friendInterests FriendInterest[]
}

model FriendInterest {
  friend   Friend @relation(fields: [friendId], references: [id])
  friendId String

  interest            Interest @relation(fields: [interestId], references: [id])
  interestId          String
  friendInterestLevel Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([friendId, interestId])
}

model ExerciseTag {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercises Exercise[]
}
