import { TRPCError } from "@trpc/server"
import { {{pascalCase name }}Repository } from "./{{pascalCase name }}Repository"
import { {{pascalCase name }}Input } from "./types/{{pascalCase name }}Input"

export class {{pascalCase name }}Service {
  constructor(private readonly {{camelCase name}}Repository = new {{pascalCase name }}Repository()) {}

  async find{{pascalCase name }}s(requesterId: string) {
    return this.{{camelCase name}}Repository.find{{pascalCase name }}s(requesterId)
  }

  async save{{pascalCase name }}(requesterId: string, {{camelCase name}}: {{pascalCase name }}Input) {
    if ({{camelCase name}}.id) {
      return this.update{{pascalCase name }}(requesterId, {{camelCase name}})
    }
    return this.create{{pascalCase name }}(requesterId, {{camelCase name}})
  }

  async create{{pascalCase name }}(requesterId: string, {{camelCase name}}: {{pascalCase name }}Input) {
    return this.{{camelCase name}}Repository.create{{pascalCase name }}(requesterId, {{camelCase name}})
  }

  async update{{pascalCase name }}(requesterId: string, {{camelCase name}}: {{pascalCase name }}Input) {
    const isOwner = await this.{{camelCase name}}Repository.isOwner(
      requesterId,
      {{camelCase name}}.id!
    )
    if (!isOwner) {
      throw new TRPCError({
        code: "UNAUTHORIZED",
        message: "You are not the owner of this {{camelCase name}}",
      })
    }
    return this.{{camelCase name}}Repository.update{{pascalCase name }}({{camelCase name}})
  }
}
